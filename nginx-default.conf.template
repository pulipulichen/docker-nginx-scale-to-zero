# set search paths for pure Lua external libraries (';;' is the default path):
#lua_package_path '/foo/bar/?.lua;/blah/?.lua;;';

# set search paths for Lua external libraries written in C (can also use ';;'):
#lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so;;';

#upstream http_backend {
#    server ${BACKEND} weight=10;
#   server 127.0.0.1:8001 weight=10;
#    #keepalive 16; 
#}

map $http_upgrade $connection_upgrade {
  default upgrade;
  '' close;
}

server {
  listen       ${PORT};
  server_name  localhost;

  #access_log  /dev/null;   
  #error_log /dev/null;

  access_log  off;   
  error_log off;

  #access_log  /var/log/nginx/host.access.log  main;

  #deny 127.0.0.1;

  proxy_intercept_errors on;

  location / {
      # root   /usr/share/nginx/html;
      # index  index.html index.htm;
      #proxy_pass http://http_backend/;
      #proxy_http_version 1.1;
      #proxy_set_header Connection "";
      proxy_pass http://${BACKEND}/;
      #proxy_read_timeout 1s;
      #proxy_connect_timeout       ${CONNECT_TIMEOUT};
      proxy_connect_timeout       1s;
      #proxy_send_timeout          1s;
      #send_timeout                1s;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;

      #content_by_lua_block {
      #  local headers = ngx.req.get_headers()
      #  ngx.say("Host: ", ngx.req.get_headers()[""])
      #}

      log_by_lua_block { 
        local headers = ngx.req.get_headers()
        local SourceFromIngress = "false"
        if headers["SourceFromIngress"] then
          SourceFromIngress = "true"
        end
        os.execute('curl -s "http://127.0.0.1:8080/?remote_addr=' .. ngx.var.remote_addr .. '&header=' .. SourceFromIngress .. '"');
      }
  }

  #error_page 404 /error404.html;

  # redirect server error pages to the static page /50x.html 
  #
  error_page 404 403 500 502 503 504 /error-page.html;
  location = /error-page.html {

    #root /dlll_paas/html;
    #internal;

    #content_by_lua_block {
    #  local headers = ngx.req.get_headers()
    #  ngx.say("Host: ", ngx.req.get_headers()["Foo2"])
    #}

    content_by_lua_block { 
      local headers = ngx.req.get_headers()
      local SourceFromIngress = "false"
      if headers["SourceFromIngress"] then
        SourceFromIngress = "true"
      end
      os.execute('curl -s "http://127.0.0.1:8080/?force_scale_up=true&remote_addr=' .. ngx.var.remote_addr .. '&header=' .. SourceFromIngress .. '"');
      ngx.sleep(5)
      local full_url = ngx.var.scheme.."://"..ngx.var.http_host..ngx.var.request_uri
      if ngx.var.query_string ~= nil then
        full_url = full_url.."?"..ngx.var.query_string
      end
      return ngx.redirect(full_url)
    }
  }

  # proxy the PHP scripts to Apache listening on 127.0.0.1:80
  #
  # location ~ \ {
  # #    http://help.websiteos.com/websiteos/example_of_a_simple_html_page.htm
  #    proxy_pass   http://help.websiteos.com/websiteos/example_of_a_simple_html_page.htm;
  # }

  # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
  #
  #location ~ \.php$ {
  #    root           html;
  #    fastcgi_pass   127.0.0.1:9000;
  #    fastcgi_index  index.php;
  #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
  #    include        fastcgi_params;
  #}

  # deny access to .htaccess files, if Apache's document root
  # concurs with nginx's one
  #
  #location ~ /\.ht {
  #    deny  all;
  #}
}
